{"version":3,"sources":["MovieAPI.js","Header.js","Movie.js","MoviesHeader.js","App.js","index.js"],"names":["api","getAll","fetch","concat","then","response","json","addToList","movie","id","method","headers","Content-Type","body","JSON","stringify","my_list","res","removeFromList","genres","Header","state","searchInput","updateSearch","e","_this","setState","target","value","props","searchMatchingMovies","displayNumberOfResults","length","results","render","react_default","a","createElement","className","react_router_dom","to","src","alt","border","type","placeholder","onChange","React","Component","Movie","poster_path","title","vote_average","overview","data-toggled","onClick","updateList","MoviesHeader","displayMovie","movies","map","key","filter","notClasifiedMovie","genre_ids","includes","genre","App","componentDidMount","getDataFromAPI","MovieAPI","sort","b","name","localeCompare","prevState","movieIndex","findIndex","movieInState","movieClone","Object","objectSpread","stateMoviesClone","toConsumableArray","splice","query","console","log","matchedMovies","toLowerCase","clasifyMovies","moviesByGenre","src_MoviesHeader","Fragment","src_Header","react_router","exact","path","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.53ff9992.chunk.js","sourcesContent":["const api = \"http://localhost:3001\"\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/movies`)\r\n    .then(response => response.json())\r\n\r\nexport const addToList = movie =>\r\n  fetch(`${api}/movies/${movie.id}`,{\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({my_list: true})\r\n  }).then(res => res.json());\r\n\r\nexport const removeFromList = movie =>\r\n    fetch(`${api}/movies/${movie.id}`,{\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({my_list: false})\r\n    }).then(res => res.json());\r\n\r\nexport const genres = () =>\r\n  fetch(`${api}/genres`)\r\n    .then(response => response.json())\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Header extends React.Component {\r\n  state = {\r\n    searchInput: \"\",\r\n  }\r\n\r\n  updateSearch = (e) => {\r\n    this.setState(\r\n      {searchInput: e.target.value},\r\n      () => this.props.searchMatchingMovies(this.state.searchInput)\r\n    );         \r\n    //this.props.searchMatchingMovies(e.target.value);    \r\n  }\r\n\r\n  displayNumberOfResults = () => {\r\n    if (this.state.searchInput.length > 0) {\r\n      return `Found ${this.props.results} ${this.props.results == 1 ? 'movie' : 'movies'} with the query \"${this.state.searchInput}\"`\r\n    }\r\n  }\r\n  \r\n  render = () => {\r\n    return (\r\n      <header className=\"header\">\r\n        <Link to=\"/\">\r\n          <img\r\n            src=\"https://fontmeme.com/permalink/190707/fd4735271a0d997cbe19a04408c896fc.png\"\r\n            alt=\"netflix-font\"\r\n            border=\"0\"\r\n          />\r\n        </Link>\r\n        <div id=\"navigation\" className=\"navigation\">\r\n          <nav>\r\n            <ul>\r\n              <li><Link to=\"/my-list\">My List</Link></li>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n        <form id=\"search\" className=\"search\">\r\n          <input \r\n            type=\"search\" \r\n            placeholder=\"Search for a title...\" \r\n            value={this.state.searchInput}\r\n            onChange={this.updateSearch} \r\n          />\r\n          <div className=\"searchResults\">{this.displayNumberOfResults()}</div>\r\n        </form>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nexport default function Movie(props) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img\r\n        src={props.movie.poster_path}\r\n      />\r\n      <div className=\"overlay\">\r\n        <div className=\"title\">{props.movie.title}</div>\r\n        <div className=\"rating\">{props.movie.vote_average}/10</div>\r\n        <div className=\"plot\">\r\n          {props.movie.overview}\r\n        </div>\r\n        <div \r\n          data-toggled={props.movie.my_list} \r\n          className=\"listToggle\" \r\n          onClick={() =>props.updateList(props.movie)}\r\n        >\r\n          <div>\r\n            <i className=\"fa fa-fw fa-plus\"></i>\r\n            <i className=\"fa fa-fw fa-check\"></i>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport Movie from './Movie';\r\n\r\nclass MoviesHeader extends React.Component {\r\n\r\n  displayMovie = (title) => {\r\n    if (title === \"My List\") { // displaying movies from My list\r\n      return (this.props.movies.map(movie => (\r\n        <Movie key={movie.id} movie={movie} updateList={this.props.updateList} />\r\n      )))\r\n    } else { //displaying movies by each category\r\n        return (\r\n          this.props.movies.filter(notClasifiedMovie => notClasifiedMovie.genre_ids.includes(this.props.genre.id)).map(movie => (\r\n            <Movie key={movie.id} movie={movie} updateList={this.props.updateList} />\r\n          ))\r\n        )\r\n    }    \r\n  }\r\n\r\n  render = () => {\r\n    return (  \r\n      <div className=\"titleList\">\r\n        <div className=\"title\">\r\n          <h1>{this.props.title}</h1>\r\n          <div className=\"titles-wrapper\">\r\n            {this.props.movies.map(movie => (\r\n              <Movie key={movie.id} movie={movie} updateList={this.props.updateList} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }  \r\n}\r\n\r\nexport default MoviesHeader;","import React from 'react';\r\nimport * as MovieAPI from './MovieAPI';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport MoviesHeader from './MoviesHeader';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    movies: [],\r\n    genres: [],\r\n  }\r\n  \r\n  componentDidMount = () => {\r\n    this.getDataFromAPI();\r\n  }\r\n\r\n  getDataFromAPI = () => {\r\n    MovieAPI.genres()\r\n    .then(genres => {        \r\n      genres.sort((a,b) => a.name.localeCompare(b.name)); //source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\r\n      MovieAPI.getAll()\r\n        .then(movies => {\r\n          this.setState({genres, movies})\r\n        })      \r\n    })\r\n  }\r\n\r\n  updateList = (movie) => {\r\n    if (movie.my_list === false) {\r\n      MovieAPI.addToList(movie)\r\n        .then(() => {\r\n          this.setState(prevState => {\r\n            const movieIndex = prevState.movies.findIndex(movieInState => movieInState === movie);//find position of existing movie in state        \r\n            const movieClone = {...prevState.movies[movieIndex]}; //make a clone of it          \r\n            movieClone.my_list = true; //change the property (my_list) of the clone\r\n            const stateMoviesClone = [...prevState.movies]; //clone the previous state          \r\n            stateMoviesClone.splice(movieIndex, 1, movieClone); //replace the original movie with clone\r\n            return {movies: stateMoviesClone} //return a new state\r\n          })\r\n        })\r\n    } else if (movie.my_list === true) {\r\n      MovieAPI.removeFromList(movie)\r\n        .then(() => {\r\n          this.setState(prevState => {\r\n            const movieIndex = prevState.movies.findIndex(movieInState => movieInState === movie); //find position of existing movie in state\r\n            const movieClone = {...prevState.movies[movieIndex]}; //make a clone of it\r\n            movieClone.my_list = false; //change the property (my_list) of the clone\r\n            const stateMoviesClone = [...prevState.movies]; //clone the previous state\r\n            stateMoviesClone.splice(movieIndex, 1, movieClone); //replace the original movie with clone\r\n            return {movies: stateMoviesClone} //return a new state\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  searchMatchingMovies = (query) => {\r\n    console.log(query);\r\n    if (query === \"\") {\r\n      this.getDataFromAPI();          \r\n    } else {      \r\n      this.setState(() => {\r\n        const matchedMovies = this.state.movies.filter(movie => \r\n          movie.title.toLowerCase().includes(query.toLowerCase()) || movie.overview.toLowerCase().includes(query.toLowerCase())\r\n        ) //filtering the state (creating new array)        \r\n        return {movies: matchedMovies, results: matchedMovies.length} //return a new state composed of that filtered array and number of founded movies\r\n      })\r\n    }        \r\n  }\r\n\r\n  clasifyMovies = (genre) => {\r\n    const moviesByGenre = this.state.movies.filter(movie => movie.genre_ids.includes(genre.id));//filtering the state, to get movies by each genre\r\n    if (moviesByGenre.length > 0) { //display only genres and their movies, if they have movies\r\n      return ( \r\n        <MoviesHeader key={genre.id} title={genre.name} movies={moviesByGenre} genre={genre} updateList={this.updateList} />\r\n      )\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <>\r\n        <Header searchMatchingMovies={this.searchMatchingMovies} movies={this.state.movies} results={this.state.results}/>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            {this.state.genres.map(genre => this.clasifyMovies(genre))}        \r\n          </Route>\r\n\r\n          <Route path=\"/my-list\">\r\n            <MoviesHeader title=\"My List\" key=\"my-list\" movies={this.state.movies.filter(movie => movie.my_list === true)} updateList={this.updateList} />\r\n          </Route>\r\n        </Switch>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}